name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
jobs:
  test:
    runs-on: ubuntu-latest

    # https://github.com/actions/example-services/blob/master/.github/workflows/postgres-service.yml
    services:
      postgres:
        image: postgres:12.3
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
        # will assign a random free host port
        - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5


    strategy:
      matrix:
        # If you ever add more node versions you need to replace current caching node_modules with caching of ~/.npm
        node-version: [16.14.0]
        pandoc-version: [2.11.3.2]
        redis-version: [6.2.6]

    environment: Tests
    
    steps:
    - name: Checkout code  
      uses: actions/checkout@v2

    - name: Set up Pandoc
      if: steps.pandoc.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/jgm/pandoc/releases/download/${{ matrix.pandoc-version }}/pandoc-${{ matrix.pandoc-version }}-linux-amd64.tar.gz -O pandoc.tar.gz
        mkdir pandoc
        tar xvzf pandoc.tar.gz --strip-components 1 -C pandoc
        echo "$(pwd)/pandoc/bin" >> $GITHUB_PATH

    - name: Source pandoc
      run: echo "BLOT_PANDOC_PATH=$(which pandoc)" >> $GITHUB_ENV

    - name: Set up Node
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Set up Redis
      uses: shogo82148/actions-setup-redis@v1
      with:
        redis-version: ${{ matrix.redis-version }}

    - name: Load dependencies
      uses: actions/cache@v2
      id: cache-node-dependencies
      with:
        path: node_modules
        key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
  
    - name: Install Dependencies
      if: steps.cache-node-dependencies.outputs.cache-hit != 'true'
      run: npm ci

    - name: Run tests
      env:
        BLOT_CACHE: false
        BLOT_DIRECTORY: /home/runner/work/Blot/Blot
        NODE_PATH: /home/runner/work/Blot/Blot/app
        BLOT_CACHE_DIRECTORY: /home/runner/work/Blot/Blot/cache
        BLOT_DEBUG: false
        BLOT_MAINTENANCE: false
        BLOT_PRODUCTION: true
        BLOT_PROTOCOL: https
        BLOT_ENVIRONMENT: production
        BLOT_HOST: blot.development
        BLOT_ADMIN_EMAIL: ${{ secrets.BLOT_ADMIN_EMAIL }}
        BLOT_DROPBOX_APP_SECRET: ${{ secrets.BLOT_DROPBOX_APP_SECRET }}
        BLOT_DROPBOX_FULL_SECRET: ${{ secrets.BLOT_DROPBOX_FULL_SECRET }}
        BLOT_DROPBOX_TEST_ACCOUNT_APP_TOKEN: ${{ secrets.BLOT_DROPBOX_TEST_ACCOUNT_APP_TOKEN }}
        BLOT_DROPBOX_TEST_ACCOUNT_FULL_TOKEN: ${{ secrets.BLOT_DROPBOX_TEST_ACCOUNT_FULL_TOKEN }}
        BLOT_DROPBOX_TEST_ACCOUNT_ID: ${{ secrets.BLOT_DROPBOX_TEST_ACCOUNT_ID }}
        BLOT_MAILGUN_KEY: ${{ secrets.BLOT_MAILGUN_KEY }}
        BLOT_SESSION_SECRET: ${{ secrets.BLOT_SESSION_SECRET }}
        BLOT_TWITTER_ACCESS_TOKEN_KEY: ${{ secrets.BLOT_TWITTER_ACCESS_TOKEN_KEY }}
        BLOT_TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.BLOT_TWITTER_ACCESS_TOKEN_SECRET }}
        BLOT_TWITTER_CONSUMER_KEY: ${{ secrets.BLOT_TWITTER_CONSUMER_KEY }}
        BLOT_TWITTER_CONSUMER_SECRET: ${{ secrets.BLOT_TWITTER_CONSUMER_SECRET }}
        BLOT_POSTGRES_USER: postgres      
        BLOT_POSTGRES_PASSWORD: postgres      
        BLOT_POSTGRES_DB: postgres      
        BLOT_POSTGRES_HOST: localhost      
        BLOT_POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }} # get randomly assigned published port
      run: |
        git config --global user.email "admin@example.com"
        git config --global user.name "Admin"
        node config/blot/setup
        node scripts/db/create-postgres-table
        npm test
