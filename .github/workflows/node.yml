name: node

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:6
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build test image
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          target: dev
          load: true
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/blot
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/blot,mode=max
          tags: ghcr.io/${{ github.repository_owner }}/blot:test-${{ github.sha }}
    
      - name: Run tests
        env:
          BLOT_STRIPE_KEY: ${{ secrets.BLOT_STRIPE_KEY }}
          BLOT_STRIPE_SECRET: ${{ secrets.BLOT_STRIPE_SECRET }}
          BLOT_STRIPE_PRODUCT: ${{ secrets.BLOT_STRIPE_PRODUCT }}
        run: |
          docker run --rm \
            --network name=${{ job.services.redis.network }} \
            -e BLOT_REDIS_HOST=redis \
            -e BLOT_STRIPE_KEY=$BLOT_STRIPE_KEY \
            -e BLOT_STRIPE_SECRET=$BLOT_STRIPE_SECRET \
            -e BLOT_STRIPE_PRODUCT=$BLOT_STRIPE_PRODUCT \
            -v ${{ github.workspace }}/app:/usr/src/app/app \
            -v ${{ github.workspace }}/scripts:/usr/src/app/scripts \
            -v ${{ github.workspace }}/config:/usr/src/app/config \
            -v ${{ github.workspace }}/notes:/usr/src/app/notes \
            -v ${{ github.workspace }}/todo.txt:/usr/src/app/todo.txt \
            -v ${{ github.workspace }}/.git:/usr/src/app/.git \
            -v ${{ github.workspace }}/tests:/usr/src/app/tests \
            ghcr.io/${{ github.repository_owner }}/blot:test-${{ github.sha }} \
            sh -c "node ./app/documentation/build/index.js --no-watch --skip-zip && node tests && npx depcheck --ignores=depcheck,nyc,nodemon,blessed-contrib,fontkit,text-to-svg --skip-missing"

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build production image 
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          target: prod
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/blot
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/blot,mode=max
          tags: ghcr.io/${{ github.repository_owner }}/blot:${{ github.sha }}-pending

      - name: Verify built-in health check
        env:
          IMAGE: ghcr.io/${{ github.repository_owner }}/blot:${{ github.sha }}-pending
        run: |
          # Start a Redis container
          redis_container_id=$(docker run -d --name test_redis redis:latest)

          # Ensure Redis started successfully
          if [ -z "$redis_container_id" ]; then
            echo "Failed to start the Redis container. Exiting..."
            exit 1
          fi

          echo "Waiting for Redis ($redis_container_id) to become ready..."
          timeout=30
          interval=2
          elapsed=0
          while ! docker exec $redis_container_id redis-cli ping | grep -q PONG; do
            if [ $elapsed -ge $timeout ]; then
              echo "Redis did not become ready within $timeout seconds. Exiting..."
              docker stop $redis_container_id
              docker rm $redis_container_id
              exit 1
            fi
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          echo "Redis is ready."

          # Start the app container with Redis environment variables
          container_id=$(docker run -d --env REDIS_HOST=test_redis --env REDIS_PORT=6379 $IMAGE)

          # Ensure the app container started successfully
          if [ -z "$container_id" ]; then
            echo "Failed to start the app container. Exiting..."
            docker stop $redis_container_id
            docker rm $redis_container_id
            exit 1
          fi

          echo "Waiting for the app container ($container_id) to pass the built-in health check..."

          # Stream logs from the app container
          while true; do
            docker exec $container_id cat /usr/src/app/data/logs/docker/app.log || true
            sleep 2
          done &
          log_stream_pid=$!

          # Wait for the app container's health status to become "healthy"
          timeout=60
          interval=5
          elapsed=0
          while [ "$(docker inspect --format='{{json .State.Health.Status}}' $container_id)" != '"healthy"' ]; do
            if [ $elapsed -ge $timeout ]; then
              echo "Health check failed: app container did not become healthy within $timeout seconds."

              # Stop the log streaming process
              kill $log_stream_pid
              wait $log_stream_pid 2>/dev/null

              echo "Final log contents:"
              docker exec $container_id cat /usr/src/app/data/logs/docker/app.log

              docker stop $container_id
              docker rm $container_id
              docker stop $redis_container_id
              docker rm $redis_container_id
              exit 1
            fi
            sleep $interval
            elapsed=$((elapsed + interval))
          done

          # Stop the log streaming process
          kill $log_stream_pid
          wait $log_stream_pid 2>/dev/null

          echo "App container passed the health check."

          # Clean up
          docker stop $container_id
          docker rm $container_id
          docker stop $redis_container_id
          docker rm $redis_container_id
          
  release:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Re-tag the production image for release
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/blot:${{ github.sha }}-pending
          docker tag ghcr.io/${{ github.repository_owner }}/blot:${{ github.sha }}-pending ghcr.io/${{ github.repository_owner }}/blot:${{ github.sha }}
          docker tag ghcr.io/${{ github.repository_owner }}/blot:${{ github.sha }}-pending ghcr.io/${{ github.repository_owner }}/blot:latest
          docker push ghcr.io/${{ github.repository_owner }}/blot:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/blot:latest
          