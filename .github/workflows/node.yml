# The reason this is so complicated is because github actions cache for docker
# build doesn't seem to work as well as it should. Ideally it just caches the
# work it has done before but I couldn't get this to work with much trying.
# So we manually compute the hash of the files which the base docker image layer
# depends upon and use this to tag images. If for some reason at some point
# the github actions docker cache works more efficiently, we can simplyify.

# The goals are:
# - reproducible builds
# - fast tests
# - fast deployments
name: node

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

jobs:
  setup-tests:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      test_suites: ${{ steps.set-matrix.outputs.test_suites }}
      image_hash: ${{ steps.hash.outputs.image_hash }}
      image_tag: ${{ steps.set-image-tag.outputs.image_tag }}
    env:
      # Define test suites here - single source of truth
      TEST_SUITES: |
        - app/blog
        - app/build
        - app/clients
        - app/dashboard
        - app/documentation
        - app/helper
        - app/models
        - app/site
        - app/templates
    steps:
      - name: Sparse checkout for hash calculation
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            Dockerfile
            package.json
            .dockerignore
            .github/workflows/node.yml
          sparse-checkout-cone-mode: false

      - name: Calculate hash of build-related files
        id: hash
        run: |
          # Create a list of files to hash
          FILES_TO_HASH="Dockerfile package.json .dockerignore .github/workflows/node.yml"
          
          echo "Hashing files: $FILES_TO_HASH"
          
          # Calculate hash of all these files combined
          HASH=$(cat $FILES_TO_HASH 2>/dev/null | sha256sum | cut -d ' ' -f 1)
          echo "image_hash=$HASH" >> $GITHUB_OUTPUT
          echo "Hash: $HASH"
      
      - name: Set image tag
        id: set-image-tag
        run: |
          IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/blot:test-${{ steps.hash.outputs.image_hash }}"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Image tag: $IMAGE_TAG"
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image exists
        id: check-image
        run: |
          IMAGE_TAG="${{ steps.set-image-tag.outputs.image_tag }}"
          
          if docker manifest inspect "$IMAGE_TAG" > /dev/null 2>&1; then
            echo "Image $IMAGE_TAG exists, skipping build"
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image $IMAGE_TAG does not exist, will build it"
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Checkout full code for build
        if: steps.check-image.outputs.image_exists != 'true'
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: steps.check-image.outputs.image_exists != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        if: steps.check-image.outputs.image_exists != 'true'
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          target: dev
          context: .
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/blot
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/blot,mode=max
          tags: |
            ${{ steps.set-image-tag.outputs.image_tag }}
            ghcr.io/${{ github.repository_owner }}/blot:test-latest
            
      - name: Convert test suites to matrix
        id: set-matrix
        run: |
          # Read test suites from environment variable
          echo "Test suites defined:"
          echo "$TEST_SUITES"
          
          # Clean the input - remove any leading/trailing whitespace from each line
          CLEANED_TEST_SUITES=$(echo "$TEST_SUITES" | sed -e 's/^[ \t]*//' -e 's/[ \t]*$//')
          
          # Process the YAML list into a proper JSON array for the test_suites output
          TEST_SUITES_JSON=$(echo "$CLEANED_TEST_SUITES" | grep '^- ' | sed 's/^- /"/g' | sed 's/$/"/g' | tr '\n' ',' | sed 's/,$//' | sed 's/^/[/' | sed 's/$/]/')
          echo "test_suites=$TEST_SUITES_JSON" >> $GITHUB_OUTPUT
          
          # Format as JSON for GitHub Actions matrix - ensure it's valid JSON
          echo "Creating matrix JSON..."
          MATRIX_JSON="{\"test_suite\":$TEST_SUITES_JSON}"
          echo "$MATRIX_JSON" | jq '.' # Validate JSON format
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          
  validate-test-coverage:
    needs: setup-tests
    runs-on: ubuntu-latest
    # This job runs in parallel with other jobs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract test suites
        run: |
          # Extract test suites directly from the output
          echo "Test suites defined in matrix:"
          TEST_SUITES='${{ needs.setup-tests.outputs.test_suites }}'
          
          # Fix any potential JSON formatting issues
          TEST_SUITES=$(echo "$TEST_SUITES" | sed 's/,"]$/]/')
          echo "$TEST_SUITES"
          
          # Parse the JSON array and create a file with one suite per line
          echo "$TEST_SUITES" | jq -r '.[]' > matrix_suites.txt
          
          echo "Test suites for validation:"
          cat matrix_suites.txt

      - name: Find all test files
        run: |
          # Find all files containing test specifications
          echo "Finding all files containing 'describe(' or 'it('"
          TEST_FILES=$(grep -r --include="*.js" -l -E "(describe\(|it\()" --include="**/tests/**/*.js" --include="**/tests.js" . | 
                      grep -v "node_modules" || true)
          
          echo "Found test files:"
          echo "$TEST_FILES"
          
          # Save the list to a file for further processing
          echo "$TEST_FILES" > all_test_files.txt

      - name: Check if all tests are covered by matrix
        run: |
          # Create a regex pattern from the matrix suites
          PATTERN=""
          while read suite; do
            PATTERN="${PATTERN}|^\./${suite}"
          done < matrix_suites.txt
          PATTERN="${PATTERN:1}" # Remove the leading |
          
          # Find test files not matching any suite pattern
          echo "Checking for test files not covered by matrix..."
          UNCOVERED_TESTS=$(grep -v -E "$PATTERN" all_test_files.txt || true)
          
          if [ -n "$UNCOVERED_TESTS" ]; then
            echo "ERROR: Found test files not covered by any test suite in the matrix:"
            echo "$UNCOVERED_TESTS"
            echo ""
            echo "Please add the appropriate directories to the TEST_SUITES env var in the 'setup-tests' job."
            exit 1
          else
            echo "All test files are covered by the test matrix. Good job!"
          fi

  test:
    needs: setup-tests
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup-tests.outputs.matrix) }}
      fail-fast: false

    services:
      redis:
        image: redis:6
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests - ${{ matrix.test_suite }}
        env:
          BLOT_STRIPE_KEY: ${{ secrets.BLOT_STRIPE_KEY }}
          BLOT_STRIPE_SECRET: ${{ secrets.BLOT_STRIPE_SECRET }}
          BLOT_STRIPE_PRODUCT: ${{ secrets.BLOT_STRIPE_PRODUCT }}
          IMAGE_TAG: ${{ needs.setup-tests.outputs.image_tag }}
        run: |
          docker run --rm \
            --network host \
            -e BLOT_REDIS_HOST=localhost \
            -e BLOT_STRIPE_KEY=$BLOT_STRIPE_KEY \
            -e BLOT_STRIPE_SECRET=$BLOT_STRIPE_SECRET \
            -e BLOT_STRIPE_PRODUCT=$BLOT_STRIPE_PRODUCT \
            -v ${{ github.workspace }}/app:/usr/src/app/app \
            -v ${{ github.workspace }}/scripts:/usr/src/app/scripts \
            -v ${{ github.workspace }}/config:/usr/src/app/config \
            -v ${{ github.workspace }}/notes:/usr/src/app/notes \
            -v ${{ github.workspace }}/todo.txt:/usr/src/app/todo.txt \
            -v ${{ github.workspace }}/.git:/usr/src/app/.git \
            -v ${{ github.workspace }}/tests:/usr/src/app/tests \
            $IMAGE_TAG \
            sh -c "node /usr/src/app/app/documentation/build/index.js --no-watch --skip-zip && node tests ${{ matrix.test_suite }} && npx depcheck --ignores=depcheck,nyc,nodemon,blessed-contrib,fontkit,text-to-svg --skip-missing"

  build-production-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production image
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          target: prod
          context: .
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/blot
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/blot,mode=max
          tags: ghcr.io/${{ github.repository_owner }}/blot:${{ github.sha }}

      - name: Verify built-in health check
        env:
          IMAGE: ghcr.io/${{ github.repository_owner }}/blot:${{ github.sha }}
        run: |
          docker network create test_network

          # Start a Redis container
          redis_container_id=$(docker run -d --name test_redis --network test_network redis:latest)

          # Ensure Redis started successfully
          if [ -z "$redis_container_id" ]; then
            echo "Failed to start the Redis container. Exiting..."
            exit 1
          fi

          echo "Waiting for Redis ($redis_container_id) to become ready..."
          timeout=30
          interval=2
          elapsed=0
          while ! docker exec $redis_container_id redis-cli ping | grep -q PONG; do
            if [ $elapsed -ge $timeout ]; then
              echo "Redis did not become ready within $timeout seconds. Exiting..."
              docker stop $redis_container_id
              docker rm $redis_container_id
              exit 1
            fi
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          echo "Redis is ready."

          # Start the app container with Redis environment variables
          container_id=$(docker run -d --network test_network --env BLOT_REDIS_HOST=test_redis -p 8080:8080 $IMAGE)

          # Ensure the app container started successfully
          if [ -z "$container_id" ]; then
            echo "Failed to start the app container. Exiting..."
            docker stop $redis_container_id
            docker rm $redis_container_id
            exit 1
          fi

          echo "Waiting for the app container ($container_id) to pass the built-in health check..."

          # Wait for the app container's health status to become "healthy"
          timeout=60
          interval=5
          elapsed=0
          while [ "$(docker inspect --format='{{json .State.Health.Status}}' $container_id)" != '"healthy"' ]; do
            if [ $elapsed -ge $timeout ]; then
              echo "Health check failed: app container did not become healthy within $timeout seconds."

              echo "Final log contents:"
              docker exec $container_id cat /usr/src/app/data/logs/docker/app.log

              docker stop $container_id
              docker rm $container_id
              docker stop $redis_container_id
              docker rm $redis_container_id
              exit 1
            fi
            sleep $interval
            elapsed=$((elapsed + interval))
          done

          echo "App container passed the health check."

          # Clean up
          docker stop $container_id
          docker rm $container_id
          docker stop $redis_container_id
          docker rm $redis_container_id