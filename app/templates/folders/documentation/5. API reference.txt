# API Reference

This page describes the APIs for ConnectKit, which you can reference during development.

---

## Components and Hooks

Below is a list of the React.js components and Hooks provided as part of the ConnectKit library:

| Component / Hook              | Description                                                                                 |
|-------------------------------|---------------------------------------------------------------------------------------------|
| `<ConnectKitProvider />`      | Provides state and data to various ConnectKit components. Wrap it around your React.js app. |
| `<ConnectKitButton />`        | The ConnectKit button. Place this component where you’d like the Connect Wallet button.     |
| `<ConnectKitButton.Custom />` | Design your own Connect button. Various wallet connection states are provided via render props. |
| `<Avatar />`                  | Change the avatar used in ConnectKit to match the look and feel of your app.               |
| `<ChainIcon />`               | Access ConnectKit's chain icons for consistency.                                            |
| `useModal()`                  | Programmatically control some aspects of the modal.                                         |
| `useSIWE()`                   | Programmatically control some aspects of SIWE.                                              |
| `useChains()`                 | Access the configured chains via this convenient Hook.                                      |

---

## `<ConnectKitProvider />`

Wrap `<ConnectKitProvider>` around your React.js app to provide state and data to various ConnectKit components.

### Theme

Sets which theme ConnectKit should use. Below is a table of values for the `theme` property:

| Theme Prop   | Description          | Light/Dark Mode Support |
|--------------|----------------------|-------------------------|
| `default`    | Default theme        | Yes                     |
| `web95`      | Web95 theme          | No                      |
| `retro`      | Retro theme          | No                      |
| `soft`       | Soft theme           | No                      |
| `midnight`   | Midnight theme       | No                      |
| `minimal`    | Minimal theme        | No                      |
| `rounded`    | Rounded theme        | No                      |
| `nouns`      | Nouns theme          | No                      |

---

### Mode

Sets the dark/light mode configuration for ConnectKit. Below is a table of values for the `mode` property:

| Mode Prop   | Description                                              |
|-------------|----------------------------------------------------------|
| `auto`      | Matches the user's system color scheme (light or dark).  |
| `dark`      | Dark mode                                                |
| `light`     | Light mode                                               |

---

### `customTheme`

Configure individual styles for ConnectKit, overriding styles from the selected theme. Below is a table of values for the `customTheme` property.

> **Note:** Overriding theme variables isn't a stable feature yet and could change in future versions of ConnectKit. Only customize themes if you're confident in migrating changes during upgrades.

---

### `options`

Configuration options that you can toggle on/off. Below are the available `options` and their default values:

| Option                   | Type            | Default Value   | Description                                                                                  |
|--------------------------|-----------------|-----------------|----------------------------------------------------------------------------------------------|
| `avoidLayoutShift`       | `boolean`       | `true`          | Avoids layout shift when the modal is open by adding padding to `<body>`.                   |
| `bufferPolyfill`         | `boolean`       | `true`          | Adds a `Buffer` polyfill for WalletConnect.                                                 |
| `customAvatar`           | `ReactNode`     | `null`          | Customizes the avatar used in ConnectKit.                                                   |
| `disableSiweRedirect`    | `boolean`       | `false`         | Disables redirect to the SIWE page when a user connects a wallet.                           |
| `disclaimer`             | `ReactNode`     | `null`          | Adds a disclaimer (e.g., terms and conditions) to the modal.                                |
| `embedGoogleFonts`       | `boolean`       | `false`         | Embeds Google Fonts for themes other than the default.                                      |
| `enforceSupportedChains` | `boolean`       | `false`         | Allows users to connect only to chains supported by your app.                               |
| `ethereumOnboardingUrl`  | `string`        | `https://ethereum.org/en/wallets/` | Custom link for Ethereum onboarding.                                    |
| `hideBalance`            | `boolean`       | `false`         | Hides the wallet balance in the profile view.                                               |
| `hideNoWalletCTA`        | `boolean`       | `false`         | Hides the "I don't have a wallet" call-to-action.                                           |
| `hideQuestionMarkCTA`    | `boolean`       | `false`         | Hides the question mark in the modal that links to the "About Wallets" page.                |
| `hideRecentBadge`        | `boolean`       | `false`         | Hides the "Recent" badge on recently connected wallets.                                     |
| `hideTooltips`           | `boolean`       | `false`         | Hides tooltips that would normally appear.                                                  |
| `initialChainId`         | `number`        | First chain     | Sets the initial chain to connect to. Use `0` to remove targeting.                          |
| `language`               | `string`        | `'en-US'`       | Sets the language for ConnectKit (supports multiple languages).                             |
| `overlayBlur`            | `number`        | `null`          | Controls the degree of blur on the modal overlay.                                           |
| `truncateLongENSAddress` | `boolean`       | `true`          | Truncates long ENS addresses in the connect button.                                         |
| `walletConnectCTA`       | `'modal' \| 'link' \| 'both'` | `'modal'` | Defines the WalletConnect call-to-action display.                                           |
| `walletConnectName`      | `string`        | `'Other Wallets'` | Customizes the WalletConnect option name.                                                  |
| `walletOnboardingUrl`    | `string`        | `https://ethereum.org/en/wallets/find-wallet/` | Customizes the wallet onboarding URL.                                |

---

### `onConnect`

A callback function triggered when a wallet is connected.

| Argument     | Type     | Description                          |
|--------------|----------|--------------------------------------|
| `address`    | `string` | The connected wallet address.       |
| `connectorId`| `string` | The ID of the wallet connector used.|

---

### `onDisconnect`

A callback function triggered when a wallet is disconnected.

---

## `<ConnectKitButton />`

Place this component where you’d like the **Connect Wallet** button to appear.

| Prop            | Type      | Default     | Description                                           |
|------------------|-----------|-------------|-------------------------------------------------------|
| `label`          | `string`  | `"Connect Wallet"` | Customizes the button text/label.                     |
| `showBalance`    | `boolean` | `false`     | Displays the connected wallet's balance.             |
| `showAvatar`     | `boolean` | `true`      | Displays the avatar visual in the connect button.    |

---

## `<ConnectKitButton.Custom />`

Design your own Connect button with render props for full customization:

| Render Prop       | Type       | Description                             |
|-------------------|------------|-----------------------------------------|
| `isConnected`     | `boolean`  | Whether or not a wallet is connected.   |
| `isConnecting`    | `boolean`  | Whether ConnectKit is currently connecting. |
| `show`            | `function` | Function to show the modal.             |
| `hide`            | `function` | Function to hide the modal.             |
| `address`         | `string`   | The connected wallet's address.         |
| `truncatedAddress`| `string`   | A truncated version of the wallet address. |
| `ensName`         | `string`   | The ENS name of the connected wallet.   |
| `chain`           | `Chain`    | The chain the wallet is connected to.   |

---

## Hooks

### `useModal`

A convenience Hook to show/dismiss the modal. Must be used within a `<ConnectKitProvider>`.

| Prop          | Type                 | Description                       |
|---------------|----------------------|-----------------------------------|
| `open`        | `boolean`           | Whether the modal is open.        |
| `setOpen`     | `(boolean) => void` | Programmatically show/dismiss modal. |

---

### `useSIWE`

A Hook for accessing SIWE state. Must be used with **Sign In With Ethereum**.

| Prop             | Type                 | Description                             |
|------------------|----------------------|-----------------------------------------|
| `isSignedIn`     | `boolean`           | Whether the wallet is signed in.        |
| `data`           | `SIWESession`       | Data returned when signed in.           |
| `address`        | `string`            | Wallet address.                         |
| `error`          | `Error`             | Error if signing fails.                 |
| `signIn`         | `() => Promise`     | Prompts the user to sign in.            |
| `signOut`        | `() => Promise`     | Signs the user out.                     |

---

### `useChains`

Access your dApp's configured chains via the `useChains` Hook.

'''
import { useChains, ChainIcon } from "connectkit";

const MyComponent = () => {
  const chains = useChains();

  return (
    <>
      <p>This dApp supports the following chains:</p>
      {chains.map((chain) => (
        <div key={chain.id}>
          <ChainIcon id={chain.id} />
          <span>{chain.name}</span>
        </div>
      ))}
    </>
  );
};
'''