# Theming

ConnectKit comes with beautiful themes to match your app, as well as the ability to customize to your liking using theming variables. Below you can try various customization options.

---

## Edit Theme

### Default Themes

```
<ConnectKitProvider theme="auto" mode="light">
  {/* Your App */}
</ConnectKitProvider>
```

### Example

To set a theme, simply provide a `theme` prop to the `<ConnectKitProvider />` (and optionally a `mode` prop as well):

If you're looking to customize the connect button, check out **Custom Connect Button**.

```
<ConnectKitProvider theme="default" mode="dark">
  {/* Your App */}
</ConnectKitProvider>
```

That's it—ConnectKit should now appear with the default theme in dark mode as shown below:

---

## Theme Props

In the table below, you'll find additional theme values you can provide:

| Theme Prop   | Description          | Light/Dark Mode Support |
|--------------|----------------------|-------------------------|
| `default`    | Default theme        | Yes                     |
| `web95`      | Web95 theme          | No                      |
| `retro`      | Retro theme          | No                      |
| `soft`       | Soft theme           | No                      |
| `midnight`   | Midnight theme       | No                      |
| `minimal`    | Minimal theme        | No                      |
| `rounded`    | Rounded theme        | No                      |
| `nouns`      | Nouns theme          | No                      |

---

## Enable Google Fonts for Themes

If you decide to use a theme other than the default theme, we strongly suggest enabling the `embedGoogleFonts` option so that fonts will appear correctly.

This option is turned off by default to avoid loading any fonts from Google without your opt-in.

Here's how you enable the option:

```
<ConnectKitProvider
  theme="web95"
  options={{
    embedGoogleFonts: true,
  }}
>
  {/* Your App */}
</ConnectKitProvider>
```

---

## Mode Props

For themes that support light/dark mode, it's possible to configure which one to show. Alternatively, you can set it to `auto` so ConnectKit will automatically present light/dark mode depending on the user's system color scheme.

> **Note:** Only the `default` theme currently supports light/dark mode.

| Mode Prop   | Description                                              |
|-------------|----------------------------------------------------------|
| `auto`      | Matches the user's system color scheme (light or dark)   |
| `dark`      | Dark mode                                                |
| `light`     | Light mode                                               |

---

## Theme Variables

It's possible to override various styles of a theme by providing a `customTheme` prop to `<ConnectKitProvider />`.

> **Warning:** Overriding theme variables isn't a stable feature yet and could change in future versions of ConnectKit. We suggest only customizing the theme if you're confident you can migrate any changes when upgrading.

### Example

Below is an example of overriding the default overlay color:

```
<ConnectKitProvider
  customTheme={{
    "--ck-overlay-background": "rgba(255, 0, 0, 0.5)",
  }}
>
  {/* Your App */}
</ConnectKitProvider>
```

That's it—ConnectKit should now have a semi-transparent red overlay when it appears.

---

## Variables

In the tables below, you'll find the full list of styling variables that you can provide: