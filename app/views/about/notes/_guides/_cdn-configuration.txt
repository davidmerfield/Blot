# CDN

So I've worked out one of the reasons why CDNs are important: bandwidth delay product. 

BDP (bits) = total_available_bandwidth (bits/sec) x round_trip_time (sec)

This means that serving large files closer to your readers means dramatically increased bandwidth and faster download times. I now want to get the CDN working again. 


Goals
====-

Don't want to be uploading files offsite in order for the CDN to access them due to the additional latency. The CDN should fetch uncached files directly from Blot's server.

I want to serve a mix of temporary content (HTML responses) and unchanging content (thumbnails, cached images).

It would be ideal if we could put a CDN between the user's custom domain and Blot's server without affecting their existing DNS records in any way. That way there's only one ssl-handshake on their site and it's easier to hide the fact that they're using Blot to host their site.


Cloudfront + blotcdn.com
========================

Cloudfront now offers 'Origin Groups' which mean it can first attempt an S3 bucket, then pass the request to some other server (which in my case will be an EC2 instance).

Some files still exist only on S3, which is why this is important. Eventually I'd like to just store everything on EC2 and remove the S3 bucket and origin from the 'Origin Group'.

   1. Create origin pointing to s3 bucket
   2. Create origin pointing to blot.im
   3. Create origin group which contains origins pointing to s3, and then blot.im
   4. Create behaviour pointing to origin group

I verified requests were still getting through with this image:

https://blotcdn.com/443d398b03/avatars/1468462389403/sut8yy-cm2vr9izecb64i-yhcfrlvfg.png

I checked requests without a match in S3 were getting passed to Blot:

https://blotcdn.com/

I then replaced the origin path for the behaviour with '/static' to make it easy to handle these requests at Blot.



Issues with Cloufront
====================-

Order of origins was important. For some reason, Cloudfront would not cache responses from Blot when the S3 origin was the highest priority origin in the 'Origin group'. I re-ordered the origins, put EC2 first and then Cloudfront began returning cache-hits for images from Blot.


Questions
========-

- Think about folder structure to make serving static files easier
  - Get nginx serving all static files from scratch

- Think about moving to guid blog ids to include in the path

- Should I just create the infrastructure to point customer domains directly to Cloudfront?
  - It seems like if I set this up in front of blot.im's DNS then customers can just continue as normal. Those pointing to an IP address will not get the benefits of the CDN. How do we handle SSL nicely, can we use certs generated by resty-auto-ssl?

- Think about how to process the assets for new posts in the background to reduce publish latency?

- Don't do protocol-less URLs to blotcdn which messed with micro.blog and other feed readers

- s3 questions
  - Can I bypass s3 completely?
  - Should I be s3 creating buckets per blog?
  - Should I bypass s3? Might be nice to take load off ec2
- Can I warm the cache for the index page?

Permanent URLs which never change for thumbnails, cached images, avatars, template assets and a particular version of a file. I want to be able to generate these permanent URLs synchronously like:

{{#asset}}/style.css{{/asset}} ==-> cdn.com/{blogID}/{cacheID}/templates/foo/style.css


Custom domains and the CDN
==========================

So here's how I know I can get cloudfront between the custom doman and Blot working:

1. create cloudfront distribution for user's custom domain which points to Blot's server 
2. user creates DNS record for custom domain to point it to cloudfront's hostname
3. user creates custom CNAME record on custom domain with value specified by cloudfront to verify ownership so cloudfront can issue an SSL cert for custom domain

My problem is that this is deeply tied into Cloudfront. Ideally, my new hypothetical system would work automatically for existing users already pointing a DNS record at the host 'blot.im' (I don't think there's any way to make this work for users pointing a DNS record at Blot's IP):

1. create cloudfront distribution for user's custom domain which points to Blot's server
2. user creates DNS record for custom domain to point it to *Blot's hostname*
3. use a certificate generated by Blot on cloudfront to terminate SSL connections
