How to use:

1. With a clean environment, source the variables here:

. ~/Documents/2020/AWS/deployment.env
. ~/Documents/2020/AWS/staging.env

2. Run the script:

node scripts/deploy/launch-instance.js

Once you've finished, terminate the newly created instances:

node scripts/deploy/reset.js

---


Interface:

node scripts/deploy
	
	configure a staging domain
	configure a production domain

	would you like to deploy to staging or production ()

	

  - will launch fresh interface


High level strategy:

- automate provisioning of new instances
  run this when making changes to redis config, nginx config, instance size
  	1. launch new instance
  	2. sync db and blog folder data
  	3. associate elastic IP

- automate deployment of new application code
  run this for new commits
  	1. will upload code to production
  	2. will replace existing node processes with new ones
  	3. will provide easy way to rollback to previous version


ec2.describeKeyPairs({}, function(err, { KeyPairs }) {
	const KeyName = KeyPairs.filter(({ KeyName }) => {
		console.log(KeyName, keyPairName);
		return KeyName === keyPairName;
	}).KeyName;

	console.log(KeyName);
});

ec2.describeSecurityGroups({}, function(err, { SecurityGroups }) {
	const SecurityGroupId = SecurityGroups.filter(({ GroupName }) => {
		console.log(GroupName, securityGroupName);
		return GroupName === securityGroupName;
	})[0].GroupId;

	console.log(SecurityGroupId);
});

ec2.describeSubnets(params, function(err, data) {
   if (err) console.log(err, err.stack); // an error occurred
   else     console.log(data);           // successful response
 });