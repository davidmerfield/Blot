{{> initial.conf}}

http {

    {{> http.conf}}
    
    server {
        listen 443 ssl {{^disable_http2}}http2{{/disable_http2}};

        # the dot is important here, it means "this domain and all subdomains"
        server_name .{{host}};

        # I found this shit on the internet for getting a
        # good score with the SSL evaluator tool. Don't understand.
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";

        # Hopefully improves performance
        # one megabyte can store about 4000 sessions
        # 10m = 40,000 sessions
        ssl_session_cache shared:SITE_SSL:10m;

        # The SSL certificate we use is generated by https://github.com/kshcherban/acme-nginx
        # for the "*.blot.im" and "blot.im" domains. This allows us to do an infinite
        # number of subdomains for previewing templates. The paths to these files are
        # hardcoded in the source for kshcherban/acme-nginx. I wrote more about this
        # process in notes/wildcard-ssl
        ssl_certificate {{{ssl_certificate}}};
        ssl_certificate_key {{{ssl_certificate_key}}};

        {{> blot-site.conf}}
    }

    server {
        listen 80;
        server_name {{host}}; 
        return 301 https://$host$request_uri;
    }

    server {
        listen 80;
        listen 443 ssl {{^disable_http2}}http2{{/disable_http2}};
        server_name webhooks.{{host}}; 

        {{^development}}
        {{> auto-ssl.conf}}
        {{/development}}

        location / {
            {{> reverse-proxy.conf}}
        }
    }

    server {
       listen 127.0.0.1:80;
        
        location = /inspect {
            content_by_lua_block {
                cacher:inspect(ngx)
            }
        }

        location = /rehydrate {
            content_by_lua_block {
                local message = cacher:rehydrate(ngx)
                ngx.say(message)
            }
        }

        location = /purge {
            content_by_lua_block {
                cacher:purge(ngx)
            }
        }

        # otherwise, return 404
        location / {
            return 404;
        }
    }

    server {
        listen 80 default_server;
        listen 443 ssl {{^disable_http2}}http2{{/disable_http2}} default_server;

        {{^development}}
        {{> auto-ssl.conf}}
        {{/development}}

        {{#development}}
        ssl_certificate  /etc/blot/blot.development.crt;
        ssl_certificate_key /etc/blot/blot.development.key;
        {{/development}}

        {{> blot-blogs.conf}}
    }    

}