{{> initial.conf}}

http {

    {{> http.conf}}
    
    # blot subdomains (e.g. david.blot.im)
    server {
        listen 80;
        listen 443 ssl {{^disable_http2}}http2{{/disable_http2}};

        # match all subdomains of blot.im which do not start with preview-
        # e.g. blog-on-david.blot.im
        server_name "~^(?!preview-)[^.]+\.{{host}}$";
        
        {{> wildcard-ssl.conf}}

        {{> blot-blogs.conf}}
    }

    # preview subdomains (e.g. preview-of-blog-on-david.blot.im)
    # these skip the cache and are passed directly to node
    server {
        listen 80;
        listen 443 ssl {{^disable_http2}}http2{{/disable_http2}};
        server_name "~^preview-[^.]+\.{{host}}$";

        {{> wildcard-ssl.conf}}
        
        location / {
            set $upstream_server blot_blogs_node;
            {{> reverse-proxy.conf}}
        }
    }

    # cdn subdomain (e.g. cdn.blot.im)
    # these skip the cache and are passed directly to node
    server {
        listen 80;
        listen 443 ssl {{^disable_http2}}http2{{/disable_http2}};
        server_name cdn.{{host}};

        {{> wildcard-ssl.conf}}
        
        location / {
            set $upstream_server blot_blogs_node;
            {{> reverse-proxy.conf}}
        }
    }

    # blot.im
    server {
        listen 443 ssl {{^disable_http2}}http2{{/disable_http2}};
        server_name {{host}}; 

        {{> wildcard-ssl.conf}}

        {{> blot-site.conf}}
    }

    # webhooks relay at webhooks.blot.im
    server {
        listen 443 ssl {{^disable_http2}}http2{{/disable_http2}};
        server_name webhooks.{{host}}; 

        {{> auto-ssl.conf}}

        location / {
            # the icloud relay needs to handle large file uploads
            client_max_body_size {{webhooks_client_max_body_size}};

            # it's important we only send webhook relay requests to one
            # upstream (the master node) because it has an inmemory
            # dictionary of connected clients – if you have multiple
            # it doesn't work.
            proxy_pass http://127.0.0.1:8089;
            proxy_read_timeout 24h;
            proxy_send_timeout 24h;
            proxy_connect_timeout 24h;

            # SSE-specific configurations
            proxy_http_version 1.1;      # SSE requires HTTP/1.1
            proxy_set_header Connection '';  # Disable keep-alive
            proxy_buffering off;         # Disable response buffering
            proxy_cache off;             # Ensure no caching

            # generic
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;        
        }
    }

    # custom domains
    server {
        listen 80 default_server;
        listen 443 ssl {{^disable_http2}}http2{{/disable_http2}} default_server;
        {{> auto-ssl.conf}}
        {{> blot-blogs.conf}}
    }    

    # redirect blot.im over HTTP to HTTPS
    server {
        listen 80;
        server_name {{host}}; 
        return 301 https://$host$request_uri;
    }

    # internal server for inspecting and purging the cache
    server {
       listen 127.0.0.1:80;
        {{#openresty_instance_private_ip}}
        # needed by the node application running inside docker
        # which doesn't have access to the host network
        # this seems to cause errors for custom domains
        # and overrides the default server
        listen {{openresty_instance_private_ip}}:8077;
        {{/openresty_instance_private_ip}}
            
        location = /inspect {
            content_by_lua_block {
                cacher:inspect(ngx)
            }
        }

        location = /rehydrate {
            content_by_lua_block {
                local message = cacher:rehydrate(ngx)
                ngx.say(message)
            }
        }

        location = /purge {
            content_by_lua_block {
                cacher:purge(ngx)
            }
        }

        # otherwise, return 404
        location / {
            return 404;
        }
    }
}