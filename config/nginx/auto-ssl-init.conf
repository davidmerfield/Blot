# The "auto_ssl" shared dict should be defined with enough storage space to
# hold your certificate data. 1MB of storage holds certificates for
# approximately 100 separate domains. Note that this should not cause an
# error if there are too many domains, just that nginx will have to look
# up the certificate in the database which is slower.
lua_shared_dict auto_ssl 100m;

# The "auto_ssl" shared dict is used to temporarily store various settings
# like the secret used by the hook server on port 8999. Do not change or
# omit it.
lua_shared_dict auto_ssl_settings 64k;

# A DNS resolver must be defined for OCSP stapling to function.
#
# This example uses Google's DNS server. You may want to use your system's
# default DNS servers, which can be found in /etc/resolv.conf. If your network
# is not IPv6 compatible, you may wish to disable IPv6 results by using the
# "ipv6=off" flag (like "resolver 8.8.8.8 ipv6=off").
resolver 8.8.8.8;

# Initial setup tasks.
init_by_lua_block {

  local redis = require "resty.redis"

  local redis_options = { host = "127.0.0.1", port = 6379 , prefix = "ssl" }

  local function get_redis_instance(redis_options)

    local instance = ngx.ctx.auto_ssl_redis_instance

    if instance then
      return instance
    end

    instance = redis:new()

    local ok, err

    if redis_options["socket"] then
      ok, err = instance:connect(redis_options["socket"])
    else
      ok, err = instance:connect(redis_options["host"], redis_options["port"])
    end

    if not ok then
      return false, err
    end

    if redis_options["auth"] then
      ok, err = instance:auth(redis_options["auth"])
      if not ok then
        return false, err
      end
    end

    ngx.ctx.auto_ssl_redis_instance = instance
    return instance
  end

  auto_ssl = (require "resty.auto-ssl").new()

  auto_ssl:set("redis", redis_options)

  -- Certificates are stored in redis
  auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.redis")

  -- This function determines whether the incoming domain
  -- should automatically issue a new SSL certificate.
  -- I need to set domain:blot.im to foo in the database so that
  -- the allow_domain function works as expected even though
  -- it's not technically a user's domain
  auto_ssl:set("allow_domain", function(domain)

    local certstorage = auto_ssl.storage
    
    local fullchain_pem, privkey_pem = certstorage:get_cert(domain)

    -- If we have this cert in the memory cache
    -- then return it without checking redis to save time
    if fullchain_pem then
      return true
    end

    local redis_instance, instance_err = get_redis_instance(redis_options)

    if instance_err then
      return nil, instance_err
    end

    local res, err = redis_instance:get('domain:' .. domain)

    if res == ngx.null then
      return false
    end

    return true
  end)

  auto_ssl:init()
}

init_worker_by_lua_block {
  auto_ssl:init_worker()
}


# Internal server running on port 8999 for handling certificate tasks.
server {

  listen 127.0.0.1:8999;

  # Increase the body buffer size, to ensure the internal POSTs can always
  # parse the full POST contents into memory.
  client_body_buffer_size 128k;
  client_max_body_size 128k;

  location / {
    content_by_lua_block {
      auto_ssl:hook_server()
    }
  }
}