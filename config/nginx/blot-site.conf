root /;

# Disable etags from NGINX
etag off;

# For some reason, I was only able to *reduce* 
# the client_max_body_size in location blocks
# rather than raise it, so we start by setting
# an extremely high max POST size here, then
# reduce it where needed in the locations below
client_max_body_size 1000M;

# The caching folders include the protocol in the path, so that redirects
# from HTTP to HTTP can be handled at the Node.js application. I figure
# this isn't important here so we have no protocol in the folder structure
# use $request_uri if you want the query string also
# use $uri if you don't want the query string
set $permanent_cache $cache_directory/$blot_host/$scheme/permanent$request_uri;
set $temporary_cache $cache_directory/$blot_host/$scheme/temporary$request_uri/index.html;

# Stores the files served at the CDN route
set $static_directory $blot_directory/static;

error_page 502 /error-proxy-502.html;

location = /error-proxy-502.html {
  client_max_body_size 1M;
  root  $blot_directory/app/views;
}

# This is used to determine whether the server is handling
# requests, don't remove it unless you change monit.rc too!
location = /health {
  client_max_body_size 1M;
  return 200;
}

# location ~* \.(jpg|jpeg|gif|css|png|svg|js|ico|json|xml|txt|woff2|woff|eot|ttf|mp4)$ {
#   add_header 'Blot-Cache' 'true-permanent-gzip' always;
#   add_header 'Cache-Control' 'public, max-age=31536000' always;
#   add_header 'Access-Control-Allow-Origin' '*';
#   add_header 'Content-Encoding' 'gzip';
#   client_max_body_size 1M;
#   gzip off;
#   try_files $permanent_cache$gz @permanent_cache;  
# }

# This is used to prevent people from accessing the git repositories in user folders
# We basically pass these requests directly to the node server where they are treated
# as 404s. This needs to be in both blot-blog.conf and blot-site.conf because it seems
# all requests hit the blot-site.conf cache layer first?
location ^~ /.git {
  include /var/www/blot/config/nginx/reverse-proxy.conf;
}


# This is where we send server-sent events
# which need a long timeout
location = /status {
  client_max_body_size 1M;  
  proxy_read_timeout 24h;
  include /var/www/blot/config/nginx/reverse-proxy.conf;  
}

# Allow uploads of files up to 250mb for the importer
# and for the photo upload page. I'd like to make this
# specific in future with a nice regex
location /dashboard/ {
  client_max_body_size 250M;
  set $because_dashboard '-because-dashboard';  
  include /var/www/blot/config/nginx/reverse-proxy.conf;  
}

# We want the people using the git client to be able to 
# make large commits but perhaps we rate limit them 
# to make sure the server isn't locked up?
location /clients/git/end/ {
  client_max_body_size 1000M;
  # will only affect pulls, since you can't limit upload rate by default
  # use this to limit pushes
  # https://www.nginx.com/resources/wiki/modules/upload/
  limit_rate_after 100M;
  # sets max download speed to 100 Kbps
  limit_rate 5M; 
  include /var/www/blot/config/nginx/reverse-proxy.conf;  
}

location / {
  add_header 'Blot-Cache' 'true-permanent' always;
  add_header 'Cache-Control' 'public, max-age=31536000' always;
  add_header 'Access-Control-Allow-Origin' '*';
  client_max_body_size 1M;
  gzip on;
  try_files $permanent_cache @temporary_cache;  
}

location @temporary_cache {
  add_header 'Blot-Cache' 'true-temporary' always;
  add_header 'Cache-Control' 'no-cache' always;
  client_max_body_size 1M;
  gzip on;
  open_file_cache off;
  try_files $temporary_cache @documentation_static_files;  
}

location @documentation_static_files {
  add_header 'Blot-Cache' 'static-docs' always;
  add_header 'Cache-Control' 'public, max-age=31536000' always;
  add_header 'Access-Control-Allow-Origin' '*';
  gzip on;
  # $uri rather than $request_uri because we don't want the query string
  try_files $blot_directory/app/views$uri @blot;
}

location @blot {
  client_max_body_size 1M;
  gzip on;
  include /var/www/blot/config/nginx/reverse-proxy.conf;
}